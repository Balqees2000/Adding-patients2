
import json

#The logging module allows you to create log messages of different levels (e.g., INFO, ERROR, WARNING) and saves them to a log file.
import logging

from datetime import datetime
#The uuid module provides a function called uuid4() that generates a random UUID (Universally Unique Identifier)
import uuid

class PatientRecordsManager:
    def __init__(self):
        self.records = self.load_info_from_json_file()
        self.setup_logging()

    def add_patient(self):
       #add patients 
        nameinput = input("Please enter patient name: ")
        patientage = int(input("Please enter patient age: "))
        while True:
            patientstatus = input("Please enter patient status (Active/Inactive): ")
            if patientstatus.lower() in ["active", "inactive"]:
                break
            else:
                print("Invalid status! Please enter 'Active' or 'Inactive'.")

        patientcodelist = []
        while True:
            patientcode = input("Please input patient visit code or 'done' to finish: ")
            if patientcode.lower() == "done":
                break
            patientcodelist.append(patientcode.upper())
            
        # Generate a random UUID for each added patient
        patientid=str(uuid.uuid4())

        # dictionary to store patient info
        patientdictionary = {
            'patient ID': patientid,
            'patient name': nameinput,
            'patient age': patientage,
            'patient status': patientstatus,
            'patient codes': patientcodelist
        }

        self.records.append(patientdictionary)
        print("Patient added successfully.")
        self.save_info_in_json_file()

    def view_all_patients(self):
        # to view all patients from the JSON file
        print("All Patients:")
        for patient in self.records:
            print(patient)

    def view_inactive_patients(self):
       # to view all inactive patients
        print("Inactive Patients:")
        for patient in self.records:
            if patient['patient status'].lower() == 'inactive':
                print(patient)

    def setup_logging(self):
      log_format = "%(asctime)s - %(levelname)s - %(message)s"
    
    # Create a new logger for this class
      logger = logging.getLogger(__name__)
      logger.setLevel(logging.INFO)

    # Add a FileHandler to save logs to the log file
      file_handler = logging.FileHandler("program_log.txt")
      file_handler.setFormatter(logging.Formatter(log_format))
      logger.addHandler(file_handler)

    # Add a StreamHandler to print logs to the console
      console_handler = logging.StreamHandler()
      console_handler.setFormatter(logging.Formatter(log_format))
      logger.addHandler(console_handler)


    def save_info_in_json_file(self):
        with open("patient_records.json", "w") as file:
            json.dump(self.records, file, indent=2)

    def load_info_from_json_file(self):
        try:
            with open("patient_records.json", "r") as file:
                records = json.load(file)
            return records
        except FileNotFoundError:
            return []

    def print_log_file(self):
        with open("program_log.txt", "r") as file:
            log_contents = file.read()
            print(log_contents)


if __name__ == "__main__":
    manager = PatientRecordsManager()
    startTime = datetime.now()

print("Welcome to Patient records management information system")

    
print("Select 1 to add a patient")
print("Select 2 to view all patients from the JSON file")
print("Select 3 to view inactive patients from the JSON file")
print("Select 4 to print the log file")
print("Select 5 to exit")
        
while True:
        user_input = int(input("Please select one of the above options: "))

        if user_input == 1:
            manager.add_patient()
            manager.save_info_in_json_file()
        elif user_input == 2:
            manager.view_all_patients()
        elif user_input == 3:
            manager.view_inactive_patients()
        elif user_input == 4:
            manager.print_log_file()
        elif user_input == 5:
            break
        else:
            print("Incorrect choice: please choose one of the above options")

endTime = datetime.now()
logging.info("Program ended.")
logging.info(f"Program execution time: {endTime - startTime}")
